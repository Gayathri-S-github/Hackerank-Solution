/* Compute nearest larger number by interchanging digits updated.
Input 1
459 500
Output 1
549
Input 2
645757 457765
Output 2
465577
Input 3
5964 9984
Output 3
-1
*/
//MainWeek21Next
import java.io.*;
import java.util.*;
 
 public class MainWeek21Next {
static ArrayList<Integer> results = new ArrayList<Integer>();   
 static int min1 = Integer.MAX_VALUE;
static int notpossible=-1;
    static int count = 0;
    static int A,B;
     static String str1;
static int h,len;
static String[] strs;
    // Find all the possible permutation of Value A.
   static public int permutation(String str1, int i, int n, int p)
    {
 
        if (i == n) {

            // Convert into Integer
            int q = Integer.parseInt(str1);
 
            // Find the minimum value of A by interchanging
            // the digit of A and store min1.
            if (q - p > 0 && q < min1) {
                min1 = q;
                count = 1;
            }
        }
 
        else {
            for (int j = i; j <= n; j++) {
                str1 = swap(str1, i, j);
                permutation(str1, i + 1, n, p);
                str1 = swap(str1, i, j);
            }
        }

        return min1;

    }
 
    // Swap two string character
static public String swap(String str, int i, int j)
    {
        char ch[] = str.toCharArray();
        char temp = ch[i];
        ch[i] = ch[j];
        ch[j] = temp;
        // Return the string after
        // swapping between two character.
        return String.valueOf(ch);
    }
 
    // Driver code
    public static void main(String[] args)throws IOException
    {
System.out.println("Enter A and B values in sinle line with space");
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
String  lines = br.readLine();    
strs = lines.trim().split("\\s+");
int a[]=new int[strs.length]; 
 for (int n = 0; n < strs.length; n++) 
 a[n] = Integer.parseInt(strs[n]);
A=a[0];
B=a[1];

        // Convert integer value into string to
        // find all the permutation of the number
        str1 = Integer.toString(A);
         len = str1.length();
         h = permutation(str1, 0, len - 1, B);     
        if (count == 0)
           System.out.println("-1");
       else
            System.out.println(h);   
    }
}

